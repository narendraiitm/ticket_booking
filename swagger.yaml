openapi: 3.0.0
info:
  title: Movie ticket booking
  description: Api documentation for movie ticket application
    
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000/
paths:
  /api/v1/theaters/{theater_id}:
    description: End point url to read, update and delete theater data.
    get:
      description: Operation to Read theater resource.
      parameters:
        - in: path
          name: theater_id
          required: true
          schema:
            type: integer
            example: 201
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: Theater object
                type: object
                properties:
                    theater_name:
                      type: string
                      example: "Shish Mahal"
                    place:
                      type: string
                      example: "Varansi"
                    seats_count:
                      type: integer
                      example: 20
                    movies:
                      type: array
                      items: {}
                      example: [{movie_id: 1001, movie_name: 'Bajirao Mastani', actors:['Ranveer Sing', 'Deepika Padukone']}]
                    slots:
                      type: array
                      items: {}
                      example: [{start_time: '7AM', end_time: '10PM'}]
        '500':
          description: Internal Server Error.
        '404':
          description: Theater not found.

    put:
      description: Operation to update the theater detail
      parameters:
        - in: path
          name: theater_id
          required: true
          schema:
            type: integer
            example: 201
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                theater_name:
                  type: string
                  example: "Shish Mahal"
                place:
                  type: string
                  example: "Varansi"
                seats_count:
                  type: integer
                  example: 20
                movies:
                  type: array
                  items: {}
                  example: [1001, 1002]
                slots:
                  type: array
                  items: {}
                  example: [101, 102]
      responses:
        '200':
          description: Successfuly updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  theater_id:
                    type: integer
                    example: 1001
                  theater_name:
                    type: string
                    example: "Shish Mahal"
                  place:
                    type: string
                    example: "Varansi"
                  seats_count:
                    type: integer
                    example: 20
                  movies:
                    type: array
                    items: {}
                    example: [{movie_id: 1001, movie_name: 'Bajirao Mastani', actors:['Ranveer Sing', 'Deepika Padukone']}]
                    
                  slots:
                    type: array
                    items: {}
                    example: [{start_time: '7AM', end_time: '10PM'}]
        '404':
          description: Theater you requested to update not found
        '500':
          description: Internal Server Error
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
    delete:
      description: Operation to delete the theater resource.
      parameters:
        - in: path
          name: theater_id
          required: true
          schema:
            type: integer
            example: 201
      responses:
        '200':
          description: Successfully Deleted.
        '404':
          description: Theater does not exist.
        '500':
          description: Intenal Server Error.
          
          
  /api/v1/theaters:
    description: End point url to create a theater.
    post:
      description: Operation create a theater.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                theater_name:
                  type: string
                  example: "Shish Mahal"
                place:
                  type: string
                  example: "Varansi"
                seats_count:
                  type: integer
                  example: 20
                movies:
                  type: array
                  items: {}
                  example: [1001, 1002]
                  
                slots:
                  type: array
                  items: {}
                  example: [101, 102]
                  
      responses:
        '201':
          description: Successfully Created theater.
          content:
            application/json:
              schema:
                type: object
                properties:
                  theater_name:
                    type: string
                    example: "Shish Mahal"
                  place:
                    type: string
                    example: "Varansi"
                  seats_count:
                    type: integer
                    example: 20
                  movies:
                    type: array
                    items: {}
                    example: [{movie_id: 1001, movie_name: 'Bajirao Mastani', actors:['Ranveer Sing', 'Deepika Padukone']}]
                  slots:
                    type: array
                    items: {}
                    example: [{start_time: '7AM', end_time: '10PM'}]
        '409':
          description: Ticket already booked.
        '500':
          description: Internal Server Error.
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
  
  
  
  /api/v1/movies/{movie_id}:
    description: End point url to read, update and delete movie data.
    get:
      description: Operation to Read movie resource.
      parameters:
        - in: path
          name: movie_id
          required: true
          schema:
            type: integer
            example: 201
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: Movie Object
                type: object
                properties:
                    movie_name:
                      type: string
                      example: "Bajirao Mastani"
                    language:
                      type: string
                      example: "Hindi"
                    actors:
                      type: array
                      items: {}
                      example: ['Ranveer Singh', 'Deepika Padukone']
                      
        '500':
          description: Internal Server Error.
        '404':
          description: Movie not found.

    put:
      description: Operation to update the movie detail
      parameters:
        - in: path
          name: movie_id
          required: true
          schema:
            type: integer
            example: 201
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movie_name:
                  type: string
                  example: "Bajirao Mastani"
                language:
                  type: string
                  example: "Hindi"
                actors:
                  type: array
                  items: {}
                  example: ['Ranveer Singh', 'Deepika Padukone']
      responses:
        '200':
          description: Successfuly updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie_id:
                    type: integer
                    example: 1001
                  movie_name:
                    type: string
                    example: "Bajirao Mastani"
                  language:
                    type: string
                    example: "Hindi"
                  actors:
                    type: array
                    items: {}
                    example: ['Ranveer Singh', 'Deepika Padukone']
        '404':
          description: Movie you requested to update not found
        '500':
          description: Internal Server Error
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
    delete:
      description: Operation to delete the Movie resource.
      parameters:
        - in: path
          name: movie_id
          required: true
          schema:
            type: integer
            example: 201
      responses:
        '200':
          description: Successfully Deleted.
        '404':
          description: Movie does not exist.
        '500':
          description: Intenal Server Error.
          
          
  /api/v1/movies:
    description: End point url to create a movie.
    post:
      description: Operation create a movie.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movie_name:
                  type: string
                  example: "Bajirao Mastani"
                language:
                  type: string
                  example: "Hindi"
                actors:
                  type: array
                  items: {}
                  example: ['Ranveer Singh', 'Deepika Padukone']
                  
      responses:
        '201':
          description: Movie Successfully Created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie_id:
                    type: integer
                    example: 1001
                  movie_name:
                    type: string
                    example: "Bajirao Mastani"
                  language:
                    type: string
                    example: "Hindi"
                  actors:
                    type: array
                    items: {}
                    example: ['Ranveer Singh', 'Deepika Padukone']
        '409':
          description: Movie already exist.
        '500':
          description: Internal Server Error.
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string 
                    
                    
  /api/v1/slots/{slot_id}:
    description: End point url to read, update and delete slot data.
    get:
      description: Operation to Read slot resource.
      parameters:
        - in: path
          name: slot_id
          required: true
          schema:
            type: integer
            example: 201
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: Slot Object
                type: object
                properties:
                    slot_id:
                      type: integer
                      example: 1001
                    start_time:
                      type: object
                      example: 7:00 PM
                    end_time:
                      type: object
                      example: 10:00 PM
                    
                      
        '500':
          description: Internal Server Error.
        '404':
          description: Slot not found.

    put:
      description: Operation to update the slot detail
      parameters:
        - in: path
          name: slot_id
          required: true
          schema:
            type: integer
            example: 201
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_time:
                  type: object
                  example: 7:00 PM
                end_time:
                  type: object
                  example: 10:00 PM
      responses:
        '200':
          description: Successfuly updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  slot_id:
                      type: integer
                      example: 1001
                  start_time:
                    type: object
                    example: 7:00 PM
                  end_time:
                    type: object
                    example: 10:00 PM
        '404':
          description: Slot you requested to update not found
        '500':
          description: Internal Server Error
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
    delete:
      description: Operation to delete the slot resource.
      parameters:
        - in: path
          name: slot_id
          required: true
          schema:
            type: integer
            example: 201
      responses:
        '200':
          description: Successfully Deleted.
        '404':
          description: Slot does not exist.
        '500':
          description: Intenal Server Error.
          
          
  /api/v1/slots:
    description: End point url to create a theater.
    post:
      description: Operation create a theater.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_time:
                  type: object
                  example: 7:00 PM
                end_time:
                  type: object
                  example: 10:00 PM
                  
      responses:
        '201':
          description: Successfully Booked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  slot_id:
                    type: integer
                    example: 1001
                  start_time:
                    type: object
                    example: 7:00 PM
                  end_time:
                    type: object
                    example: 10:00 PM
        '409':
          description: Slot already exist.
        '500':
          description: Internal Server Error.
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string 
                    

  /api/v1/booking:
    description: End point url to book a movie ticket.
    post:
      description: Operation to book a movie ticket.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                theater_id:
                  type: integer
                  example: 1001
                movie_id:
                  type: integer
                  example: 2001
                seat_number:
                  type: integer
                  example: 201
                slot_id:
                  type: integer
                  example: 10
      responses:
        '201':
          description: Successfully Booked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  theater_name:
                    type: string
                    example: "Sheesh Mahal"
                  movie_name:
                    type: string
                    example: "Bajirao Mastani"
                  seat_number:
                    type: integer
                    example: 201
                  slot_id:
                    type: string
                    example: '7:00 PM-10:00 PM'
        '409':
          description: Ticket already booked.
        '500':
          description: Internal Server Error.
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
